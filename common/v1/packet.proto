syntax = "proto3";
package common;

import "common/v1/common.proto";

// THIS PROTO FILE IS INTENDED FOR USE FOR KNOX AND KNOX CUSTOMERS.


/* [Example]
{
  "promissory_batch": [
    "LengthOfFileBytesVaries=",
    "LengthOfFileBytesVaries=",
    "LengthOfFileBytesVaries="
  ]
}
*/
message BatchedPromissory {
  // List of transferred promissory bytes. These are expected to be the
  // flatbuffer-serialized bytes of a Promissory, not protobuf.
  repeated bytes promissory_batch = 1;
}

// Transfers an amount. Upon lock, results in the change portion returned.
// If the commitment is successful, `transferred` is applied. If the commitment
// is reverted, then `refund` is applied.
// Each item is a flatbuffer-serialized bytes of a Promissory.
/* [Example]
{
  "transferred": "LengthOfFileBytesVaries=",
  "change": "LengthOfFileBytesVaries=",
  "refund": "LengthOfFileBytesVaries="
}
*/
message ReimbursablePromissory {
  // A single transferred promissory file. owner -> recipient
  bytes transferred      = 1;
  // Change portion to be returned immediately upon successful lock. owner -> owner
  optional bytes change = 2;
  // A refund of `transferred` in the event this promissory needs to be returned. owner -> owner
  optional bytes refund  = 3;
}

/* [Example]
{
  "promissories": {
    "UETR#GROUP/COMMITMENT": {
      "transferred": "LengthOfFileBytesVaries=",
      "change": "LengthOfFileBytesVaries=",
      "refund": "LengthOfFileBytesVaries="
    },
    "UETR#GROUP/COMMITMENT": {
      "transferred": "LengthOfFileBytesVaries=",
      "change": "LengthOfFileBytesVaries=",
      "refund": "LengthOfFileBytesVaries="
    }
  }
}
*/
message LockBatchedPromissory {
  // List of transferred promissory bytes. These are expected to be the
  // flatbuffer-serialized bytes of a Promissory, not protobuf.
  // [key]: string
  // [value]: ReimbursablePromissory
  map<string, ReimbursablePromissory> promissories = 1;
}

/* [Example]
{
  "promissories": {
    "UETR#GROUP/COMMITMENT": "LengthOfFileBytesVaries=",
    "UETR#GROUP/COMMITMENT": "LengthOfFileBytesVaries="
  }
}
*/
message ChangePromissories {
  // Sent by the TM in response to a participant locking in their promissories
  // Key is the commitment IRI, value is the flatbuffer-serialized bytes of a Promissory
  // [key]: string
  // [value]: bytes
  map<string, bytes> promissories = 1;
}

/* [Example]
{
  "fulfilled": [
    "UETR#GROUP/COMMITMENT",
    "UETR#GROUP/COMMITMENT"
  ],
  "finalized": {
    "UETR#GROUP/COMMITMENT": "LengthOfFileBytesVaries=",
    "UETR#GROUP/COMMITMENT": "LengthOfFileBytesVaries="
  },
  "linger": false
}
*/
message TxnOutcome {
  // List of Commitment IRIs of all commitments that were fulfilled.
  repeated string fulfilled    = 3;
  // Finalized promissories for each Commitment. The key is the commitment IRI
  // while the value is a flatbuffer-serialized bytes of a Promissory.
  // [key]: string
  // [value]: bytes
  map<string, bytes> finalized = 1;

  // Indicates whether to wait for another request from the TM for this transaction
  bool linger                  = 2;
}

/* [Example]
{
  "ciris": [
    "UETR#GROUP/COMMITMENT",
    "UETR#GROUP/COMMITMENT",
    "UETR#GROUP/COMMITMENT"
  ]
}
*/
message TxnGroupLockNack {
  // Commitment IRIs for a group that were not able to be reserved
  repeated string ciris = 1;
}

// Represents the algorithm used to derive the hash value in the `HashCondition`.
enum HashAlgorithm {
  // SHA 256 Algorithm
  SHA256    = 0;
  // SHA 512 Algorithm
  SHA512    = 1;
  // SHA3 256 Algorithm
  SHA3_256  = 2;
  // SHA3 512 Algorithm
  SHA3_512  = 3;
  // KECCAK 256 Algorithm
  KECCAK256 = 4;
  // KECCAK 512 Algorithm
  KECCAK512 = 5;
}

// The message sent during an already established connection allowing the addition or removal of an
// `uetr` tied to connection held by the `instance_id`. An optional `packet` can be provided along
// with this message to indicate that the packet occurred through the establishment of an associated
// connection.
/* [Example]
{
  "key": "AssociatedConnectionKey",
  "packet": {
    "packet_type": 100,
    "data": "LengthVariesBasedOnData=",
    "sender": {
      "signature_system": 1,
      "verifier": "BytesLengthOfSenderVerifierVariesByAlgo="
    },
    "recipient": {
      "signature_system": 1,
      "verifier": "AlgoVariesRecipientVerifierBytesLen="
    },
    "nonce": "NonceBytesLenVaryByAlgo=",
    "transaction_header": {
      "starter": {
        "signature_system": 1,
        "verifier": "BytesLenStarterVerifierVariesByAlgo="
      },
      "responder": {
        "signature_system": 1,
        "verifier": "AlgoVariesResponderVerifierBytesLen="
      },
      "uetr": "UETR",
      "timestamp": "2006-01-02T15:04:05Z",
      "signature": "ByteLengthSignatureVariesByAlgo=",
      "user_reference": "USER_REFERENCE"
    }
  }
}
*/
message ConnectionWithData {
  // Associated connection key
  bytes key     = 1;
  // inner packet
  reserved 2;
  reserved "packet";
}


enum CommitmentKind {
  // Unspecified
  UnspecifiedKind = 0;
  // Transfer
  Transfer        = 1;
  // Issue with encumbrance
  Issue           = 2;
  // Redeem with encumbrance
  Redeem          = 3;
  // Mint with no encumbrance
  Mint            = 4;
  // Burn with no encumbrance
  Burn            = 5;
}

// Represents a repeatable commitment that `Contract` signatories agree must
// come to pass in `Contract` fulfillment.
/* [Example]
{
  "sender": "zSenderPublicKey",
  "recipient": "zRecipientPublicKey",
  "amount": {
    "asset_code":"USD",
    "amount":100,
    "decimals":2
  },
  "kind": "Transfer"
}
*/
message Commitment {
  // Sender Public Key
  string sender       = 1;
  // Recipient Public Key
  string recipient    = 2;
  // Amount of Commitment
  Amount amount       = 3;
  // Kind of Commitment
  CommitmentKind kind = 4;
}