//
// Â©  2025 Knox Networks, Inc. All rights reserved.
//
// This software is the confidential and proprietary information of Knox Networks, Inc. You  shall
// not disclose such confidential Information and shall use it only in accordance with the terms of
// the license agreement you entered into with Knox Networks, Inc. This software may include third-
// party components, which are subject to their own license terms. By using this software, you
// agree to comply with those terms.
//
// Unauthorized copying of this file, via any medium is strictly prohibited.
//

syntax = "proto3";

package authority_api.v1;

import "common/v1/common.proto";

// THIS PROTO FILE IS INTENDED FOR USE FOR KNOX AND KNOX CUSTOMERS.

// Requests to get the Notary signature for a Notary public key
/* [Example]
{
  "verifier": "NotaryVerifierLengthVariesByAlgo"
}
*/
message GetNotaryRequest {
  // The Public Key of the Notary.
  string verifier = 1;
}

// Responds with the signature of the requested Notary
/* [Example]
{
  "signature": "ByteLengthSignatureVariesByAlgo="
}
*/
message GetNotaryResponse {
  // The signature of the Notary created by signing the Notary Public key with the Authority keypair
  bytes signature = 1;
}

// Entity that is the approving monetary authority- Ex Central bank or commercial bank. It can create Issuers with
// limits, approve additional issuance limits, authorize issuing of digital banknotes, and replace digital banknotes in
// circulation.
service Authority {
  // Gets the signature of the Notary for this Authority/Notary.
  rpc GetNotary(GetNotaryRequest) returns (GetNotaryResponse);
}
