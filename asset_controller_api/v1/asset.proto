syntax = "proto3";

package asset_controller;

import "common/v1/common.proto";
import "common/v1/packet.proto";

/* [Example]
{
  "amount": {
    "asset_code": "USD",
    "value": "57.00"
  },
  "file_count": 57
}
*/
message WalletBalance {
  // Amount in Wallet
  common.Amount amount = 1;
  // Number of Files in Wallet
  int64 file_count     = 2;
}

/* [Example]
{
  "did": "DID_NOTARY",
  "signature": "ByteLengthAuthSignatureVariesByAlgo="
}
*/
message Notary {
  // DID of Notary
  string did      = 1;
  // Signature of Notary
  bytes signature = 2;
}

/* [Example]
{
  "version": "0.1.0",
  "id": "ASSET_ID",
  "currency": "USD",
  "value": "10.00",
  "authority": "zAuthorityPublicKeyMultibase58Encoded",
  "owner": "zIssuerPublicKeyMultibase58Encoded",
  "created": "2006-01-02T15:04:05Z",
  "genesis_signature": "ByteLengthAuthSignatureVariesByAlgo=",
  "notary_signature": "ByteLengthTransferSignatureVariesByAlgo=",
  "notaries": [
    {
      "did": "did:method-name:zDIDMultibase58Encoded",
      "signature": "ByteLengthSignatureVariesByAlgo="
    },
    {
      "did": "did:method-name:zDIDMultibase58Encoded",
      "signature": "ByteLengthSignatureVariesByAlgo="
    }
  ]
}
*/
message Asset {
  // Version of the digital banknote file.
  string version           = 1;
  // UUID of the digital banknote file.
  string id                = 2;
  // ISO-4217 currency code.
  string currency          = 3;
  // Value of the asset represented as a decimal string.
  string value             = 4;
  // Public key of the monetary Authority.
  string authority         = 5;
  // Public key of the Owner.
  string owner             = 6;
  // RFC3339 timestamp when the asset was created.
  string created           = 7;
  // Signature of the latest block hash from the Notary.
  bytes genesis_signature  = 8;
  // Signature of the previous owner.
  bytes notary_signature   = 9;
  // List of Notaries.
  repeated Notary notaries = 10;
  // Genesis hash of all fields in Promissory
  string genesis_hash      = 11;
}

/* [Example]
{
  "asset_type": "BankAssetType",
  "page": 0,
  "page_size": 10000,
  "verifier": "zWalletPublicKey"
}
*/
message ListAssetsRequest {
  // Type of asset.
  string asset_type         = 1;
  // Page number for pagination. First page is '0'.
  uint32 page               = 2;
  // Elements per page for pagination.
  optional uint32 page_size = 3;
  // [MultibaseVerifier] Wallet verifier.
  string verifier           = 4;
}

/* [Example]
{
  "assets": [
    {
      "version": "0.1.0",
      "id": "ASSET_ID",
      "currency": "USD",
      "value": "10.00",
      "authority": "zAuthorityPublicKeyMultibase58Encoded",
      "issuer": "zIssuerPublicKeyMultibase58Encoded",
      "issuance_date": "2006-01-02T15:04:05Z",
      "block_depth": 3,
      "authorization_signature": "ByteLengthAuthSignatureVariesByAlgo=",
      "transfer_signature": "ByteLengthTransferSignatureVariesByAlgo=",
      "notaries": [
        {
          "did": "did:method-name:zDIDMultibase58Encoded",
          "signature": "ByteLengthSignatureVariesByAlgo="
        },
        {
          "did": "did:method-name:zDIDMultibase58Encoded",
          "signature": "ByteLengthSignatureVariesByAlgo="
        }
      ]
    },
    {
      "version": "0.1.0",
      "id": "ASSET_ID",
      "currency": "USD",
      "value": "5.00",
      "authority": "zAuthorityPublicKeyMultibase58Encoded",
      "issuer": "zIssuerPublicKeyMultibase58Encoded",
      "issuance_date": "2006-01-02T15:04:05Z",
      "block_depth": 3,
      "authorization_signature": "ByteLengthAuthSignatureVariesByAlgo=",
      "transfer_signature": "ByteLengthTransferSignatureVariesByAlgo=",
      "notaries": [
        {
          "did": "did:method-name:zDIDMultibase58Encoded",
          "signature": "ByteLengthSignatureVariesByAlgo="
        },
        {
          "did": "did:method-name:zDIDMultibase58Encoded",
          "signature": "ByteLengthSignatureVariesByAlgo="
        }
      ]
    }
  ],
  "total_count": 2
}
*/
message ListAssetsResponse {
  // List of Assets.
  repeated Asset assets = 1;

  // Total number of asset files
  uint32 totalCount     = 2;
}

/* [Example]
{
  "verifier": "zWalletPublicKey"
}
*/
message ListBalancesRequest {
  // Wallet verifier.
  string verifier = 1;
}

/* [Example]
{
  "balances": [
    {
      "amount": {
        "asset_code": "USD",
        "value": "57.00"
      },
      "file_count": 57
    },
    {
      "amount": {
        "asset_code": "EUR",
        "value": "57.00"
      },
      "file_count": 57
    }
  ]
}
*/
message ListBalancesResponse {
  // List of Wallet Balances by Asset Type
  repeated WalletBalance balances = 1;
}

/* [Example]
{
  "verifier": "zWalletPublicKey"
}
*/
message ListBalanceDetailsRequest {

  // Wallet verifier.
  string verifier = 1;
}

/* [Example]
{
  "balances": [
    {
      "balance": {
        "amount": {
          "asset_code": "USD",
          "value": "57.00"
        },
        "file_count": 57
      },
      "kind": 0
    },
    {
      "balance": {
        "amount": {
          "asset_code": "EUR",
          "value": "57.00"
        },
        "file_count": 57
      },
      "kind": 0
    }
  ]
}
*/
message ListBalanceDetailsResponse {
  /* [Example]
  {
    "balance": {
      "amount": {
        "asset_code": "USD",
        "value": "57.00"
      },
      "file_count": 57
    },
    "kind": 0
  }
  */
  message BalanceDetail {

    // Balance Type.
    enum Kind {
      // Indicates a balance that is available to be transferred
      KIND_AVAILABLE = 0;
      // Indicates a balance that has been earmarked to be transferred
      KIND_RESERVED  = 1;
    }
    // Sum of a particular currency in the wallet
    WalletBalance balance = 1;
    // Classification of the balance
    Kind kind             = 2;
  }

  // List of Balance Details
  repeated BalanceDetail balances = 1;
}

/* [Example]
{
  "page": 0,
  "page_size": 10000
}
*/
message ListParticipantBalanceRequest {
  // Page number for pagination. First page is '0'.
  uint32 page               = 1;
  // Elements per page for pagination.
  optional uint32 page_size = 2;
}

/* [Example]
{
  "participant": 1,
  "total_amount": {
    "asset_code": "USD",
    "value": "100.00"
  }
}
*/
message ListParticipantBalanceResponse {
  repeated common.ParticipantBalance participant_balances = 1;
  
}

/* [Example]
{
  "page": 0,
  "page_size": 10000,
  "verifier": "zWalletPublicKey"
}
*/
message ListContractsRequest {
  // Page number for pagination. First page is '0'.
  int32 page      = 1;
  // Elements per page for pagination.
  int32 page_size = 2;
  // Wallet verifier.
  string verifier = 3;
}

/* [Example]
{
  "contracts": [
    {
      "contract_id": "9628a2d9-f932-41f0-b2da-b9de3103d945",
      "contract_type": "Swap",
      "created": "2022-12-19T16:39:57-08:00",
      "counterparties": [
        "zCounterpartyPublicKeyMultibase58Encoded",
        "zCounterpartyPublicKeyMultibase58Encoded2"
      ],
      "status": 1
    },
    {
      "contract_id": "9628a2d9-f932-41f0-b2da-b9de3103d945",
      "contract_type": "Swap",
      "created": "2022-12-19T16:39:57-08:00",
      "counterparties": [
        "zCounterpartyPublicKeyMultibase58Encoded",
        "zCounterpartyPublicKeyMultibase58Encoded2"
      ],
      "status": 1
    }
  ],
  "totalCount": 2
}
*/
message ListContractsResponse {
  /* [Example]
  {
    "contract_id": "9628a2d9-f932-41f0-b2da-b9de3103d945",
    "contract_type": "Swap",
    "created": "2022-12-19T16:39:57-08:00",
    "counterparties": [
      "zCounterpartyPublicKeyMultibase58Encoded",
      "zCounterpartyPublicKeyMultibase58Encoded2"
    ],
    "status": 1
  }
  */
  message ContractSummary {
    // UUID of the contract
    string contract_id             = 1;
    // Type of the contract
    string contract_type           = 2;
    // RFC3339 timestamp of the contract creation date.
    string created                 = 3;
    // List of participant public keys excluding self
    repeated string counterparties = 4;
    // Current status of contract
    string status                  = 5;
    // Contract memo
    string memo                    = 6;
  }

  // List of contracts with status metadata
  repeated ContractSummary contracts = 1;

  // Total number of contracts
  uint32 totalCount                  = 2;
}

/* [Example]
{
  "text": "SignedContractText"
}
*/
message TransactRequest {
  // Text of the signed contract
  string text     = 1;
}

/* [Example]
{
  "status": 1,
}
*/
message TransactResponse {
  // Prepare Margin Swap Status.
  enum Status {
    // Status Unspecified.
    UNSPECIFIED = 0;
    // Status Successful.
    SUCCESS     = 1;
    // Status Unsuccessful.
    FAILURE     = 2;
    // Status Awaiting Final Approval.
    AWAITING_FINAL_APPROVAL = 3;
  }
  // Status of the transaction
  Status status = 1;
}

/* [Example]
{
  "uetr": "UETR"
}
*/
message CancelRequest {
  // A Unique End-to-end Transaction Reference, string of 36 unique characters.
  string uetr     = 2;
}

/* [Example]
{
}
*/
message CancelResponse {

}

/* [Example]
{
  "verifier": "zWalletPublicKey",
  "uetr": "UETR"
}
*/
message GetTransactionStatusRequest {
  // Verifier
  string verifier = 1;
  // A Unique End-to-end Transaction Reference, string of 36 unique characters.
  string uetr     = 2;
}

/* [Example]
{
  "state": "STATE",
  "progress": "UETR",
  "report": "ReportBytes="
}
*/
message GetTransactionStatusResponse {
  // State
  string state             = 1;
  // Optional Progress String
  optional string progress = 2;
  // Optional Report Bytes
  optional bytes report    = 3;
}

service AssetController {
  // List all of the assets of the specified asset type in a given wallet.
  rpc ListAssets(ListAssetsRequest) returns (ListAssetsResponse);

  // List the balances of each asset type in the wallet.
  rpc ListBalances(ListBalancesRequest) returns (ListBalancesResponse);

  // Lists more details about balances in a wallet such as how much funds are available vs reserved.
  rpc ListBalanceDetails(ListBalanceDetailsRequest) returns (ListBalanceDetailsResponse);

  // Lists balances of every participant.
  rpc ListParticipantBalances(ListParticipantBalanceRequest) returns (ListParticipantBalanceResponse);

  // Lists the history of all Contracts for a given wallet.
  rpc ListContracts(ListContractsRequest) returns (ListContractsResponse);

  // Start a transaction using the provided signed contract
  rpc Transact(TransactRequest) returns (TransactResponse);

  // Cancel a transaction
  rpc Cancel(CancelRequest) returns (CancelResponse);

  // Create a new transaction using Contracts 2.0
  rpc GetTransactionStatus(GetTransactionStatusRequest) returns (GetTransactionStatusResponse);
}
