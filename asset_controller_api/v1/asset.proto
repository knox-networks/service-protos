syntax = "proto3";

package asset_controller;

import "common/v1/common.proto";
import "common/v1/packet.proto";

/* [Example]
{
  "did": "DID_NOTARY",
  "signature": "ByteLengthAuthSignatureVariesByAlgo="
}
*/
message Notary {
  // DID of Notary
  string did      = 1;
  // Signature of Notary
  bytes signature = 2;
}

/* [Example]
{
  "version": "0.1.0",
  "id": "ASSET_ID",
  "currency": "USD",
  "value": "10.00",
  "authority": "zAuthorityPublicKeyMultibase58Encoded",
  "owner": "zIssuerPublicKeyMultibase58Encoded",
  "created": "2006-01-02T15:04:05Z",
  "genesis_signature": "ByteLengthAuthSignatureVariesByAlgo=",
  "notary_signature": "ByteLengthTransferSignatureVariesByAlgo=",
  "notaries": [
    {
      "did": "did:method-name:zDIDMultibase58Encoded",
      "signature": "ByteLengthSignatureVariesByAlgo="
    },
    {
      "did": "did:method-name:zDIDMultibase58Encoded",
      "signature": "ByteLengthSignatureVariesByAlgo="
    }
  ]
}
*/
message Asset {
  // Version of the digital banknote file.
  string version           = 1;
  // UUID of the digital banknote file.
  string id                = 2;
  // ISO-4217 currency code.
  string currency          = 3;
  // Value of the asset represented as a decimal string.
  string value             = 4;
  // Public key of the monetary Authority.
  string authority         = 5;
  // Public key of the Owner.
  string owner             = 6;
  // RFC3339 timestamp when the asset was created.
  string created           = 7;
  // Signature of the latest block hash from the Notary.
  bytes genesis_signature  = 8;
  // Signature of the previous owner.
  bytes notary_signature   = 9;
  // List of Notaries.
  repeated Notary notaries = 10;
  // Genesis hash of all fields in Promissory
  string genesis_hash      = 11;
}

/* [Example]
{
  "verifier": "zWalletPublicKey"
}
*/
message ListBalancesRequest {
  // Wallet verifier.
  string verifier = 1;
}

/* [Example]
{
  "balances": [
    {
      "asset_code": "USD",
      "value": "57.00"
    },
    {
      "asset_code": "EUR",
      "value": "57.00"
    }
  ]
}
*/
message ListBalancesResponse {
  // List of Wallet Balances by Asset Type
  repeated common.Amount balances = 1;
}

/* [Example]
{
  "page": 0,
  "page_size": 10000
}
*/
message ListParticipantBalanceRequest {
  // Page number for pagination. First page is '0'.
  uint32 page               = 1;
  // Elements per page for pagination.
  optional uint32 page_size = 2;
}

/* [Example]
{
  "participant": 1,
  "total_amount": {
    "asset_code": "USD",
    "value": "100.00"
  }
}
*/
message ListParticipantBalanceResponse {
  repeated common.ParticipantBalance participant_balances = 1;
  
}

/* [Example]
{
  "text": "SignedContractText"
}
*/
message TransactRequest {
  // Text of the signed contract
  string text     = 1;
}

/* [Example]
{
}
*/
message TransactResponse {

}

/* [Example]
{
  "uetr": "UETR"
}
*/
message GetTransactionStatusRequest {
  // A Unique End-to-end Transaction Reference, string of 36 unique characters.
  string uetr     = 1;
}

/* [Example]
{
  "status": "STATUS",
}
*/
message GetTransactionStatusResponse {
  // Status
  string status             = 1;
}

/* [Example]
{
  "verifier": "zWalletPublicKey",
  "asset_code": "USD"
}
*/
message GetBalanceRequest {
  string verifier = 1;
  string asset_code = 2;
}

/* [Example]
{
  "balance": {
    "asset_code":"USD",
    "value": "10.00"
  },
}
*/
message GetBalanceResponse {
  // [Amount] Total amount of the asset
  common.Amount balance = 1;
}

service AssetController {
  // List the balances of each asset type in the wallet.
  rpc ListBalances(ListBalancesRequest) returns (ListBalancesResponse);

  // Lists balances of every participant.
  rpc ListParticipantBalances(ListParticipantBalanceRequest) returns (ListParticipantBalanceResponse);

  // Start a transaction using the provided signed contract
  rpc Transact(TransactRequest) returns (TransactResponse);

  // Create a new transaction using Contracts 2.0
  rpc GetTransactionStatus(GetTransactionStatusRequest) returns (GetTransactionStatusResponse);

  // Get the balance of a participant
  rpc GetBalance(GetBalanceRequest) returns (GetBalanceResponse);
}
