syntax = "proto3";

package participant.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "common/v1/common.proto";

// THIS PROTO FILE IS INTENDED FOR USE FOR KNOX AND KNOX CUSTOMERS.

/* [Example]
{
  "name": "WALLET_NAME",
  "metadata": {
    "user_field_1": "some value",
    "user_field_2": "another value"
  }
}
*/
message CreateWalletRequest {
  // Human friendly name of the wallet.
  string name                             = 1;
  // User-defined metadata
  optional google.protobuf.Value metadata = 2;
  // Queryable ID used by external systems
  optional string external_id             = 3;
}

/* [Example]
{
  "name": "WALLET_NAME",
  "public_key": "zPublicKeyMultibase58Encoded",
    "metadata": {
    "user_field_1": "some value",
    "user_field_2": "another value"
  }
}
*/
message WalletResponse {
  // Human friendly name of the wallet.
  string name                             = 1;
  // Public key of the wallet.
  string public_key                       = 2;
  // User-defined metadata associated with the wallet.
  optional google.protobuf.Value metadata = 3;
  // Queryable ID used by external systems
  optional string external_id             = 4;
}

/* [Example]
{
  "page": 0,
  "page_size": 10
}
*/
message ListWalletsRequest {
  // Page number for pagination.
  int32 page                  = 1;
  // Size of the page for pagination.
  int32 page_size             = 2;
  // Queryable ID used by external systems
  optional string external_id = 3;
}

/* [Example]
{
  "wallets": [
    {
      "name": "WALLET1",
      "public_key": "zPublicKeyMultibase58Encoded"
    },
    {
      "name": "WALLET2",
      "public_key": "zPublicKeyMultibase58Encoded"
    }
  ],
  "total_count": 5
}
*/
message ListWalletsResponse {
  // List of Wallet objects.
  repeated WalletResponse wallets = 1;
  // Number of wallets belonging to the owner.
  uint32 total_count              = 2;
}

/*
{
  "name": "WALLET_NAME"
}
*/
message WalletRequest {
  // Public key of the wallet
  string public_key = 1;
}

// Requests to get the Notary signature for a Notary public key
/* [Example]
{
  "verifier": "NotaryVerifierLengthVariesByAlgo"
}
*/
message GetNotaryRequest {
  // Public key of the Notary.
  string notary_verifier = 1;
  // Public key of the authority that will sign the notary verifier
  string authority_verifier = 2;
}

// Responds with the signature of the requested Notary
/* [Example]
{
  "signature": "ByteLengthSignatureVariesByAlgo="
}
*/
message GetNotaryResponse {
  // The signature of the Notary created by signing the Notary Public key with the Authority keypair
  bytes signature = 1;
}

// Requests the count of files of various denominations for a given currency.
/* [Example]
{
  "asset_code": "USD"
}
*/
message GetSupplyRequest {
  // The currency code of the requested supply.
  string asset_code = 1;
  // [MultibaseVerifier] Treasury verifier.
  string verifier   = 2;
}

// Lists the count of the files of specific denominations held in the Treasury service's vault, and the total value held
// in files of that denomination.
/* [Example]
{
  "denomination": {
    "asset_code":"USD",
    "amount":2000,
    "decimals":2
  },
  "count": 5,
  "total": {
    "asset_code":"USD",
    "amount":10000,
    "decimals":2
  }
}
*/
message DenominationCount {
  // The amount of the denomination.
  common.Amount denomination = 1;
  // The number of digital banknotes of this amount held in supply.
  uint32 count               = 2;
  // The total value represented by digital banknotes of this denomination.
  common.Amount total        = 3;
}

// Provides a list of file denominations in the Treasury service's Vault.
/* [Example]
{
  "supply": [
    {
      "denomination": {
        "asset_code": "USD",
        "amount": 2000,
        "decimals": 2
      },
      "count": 5,
      "total": {
        "asset_code": "USD",
        "amount": 10000,
        "decimals": 2
      }
    },
    {
      "denomination": {
        "asset_code": "USD",
        "amount": 1000,
        "decimals": 2
      },
      "count": 5,
      "total": {
        "asset_code": "USD",
        "amount": 5000,
        "decimals": 2
      }
    }
  ],
  "total": {
    "asset_code": "USD",
    "amount": 15000,
    "decimals": 2
  }
}
*/
message GetSupplyResponse {
  // A list of denomination counts of the digital banknotes held in supply.
  repeated DenominationCount supply = 1;
  // grand total sum of all promissories
  common.Amount total               = 2;
}

// Transacts and holds digital banknotes. This is a server side wallet solution in lieu of a mobile wallet,
// hosted by the bank on behalf of the customer who opts in to do so. Can also be used by institutions,
// e.g. a financial institution vault.
service Participant {
  // Creates a new wallet
  rpc CreateWallet(CreateWalletRequest) returns (WalletResponse);
  // Gets an existing wallet.
  rpc GetWallet(WalletRequest) returns (WalletResponse);
  // List all wallets.
  rpc ListWallets(ListWalletsRequest) returns (ListWalletsResponse);
  // Deletes the wallet with the verifier. Must have zero balance.
  rpc DeleteWallet(WalletRequest) returns (google.protobuf.Empty);

  // Gets the verifier of the authority wallet.
  rpc GetAuthorityVerifier(common.GetVerifierRequest) returns (common.GetVerifierResponse);
    // Gets the verifier of the treasury wallet.
  rpc GetTreasuryVerifier(common.GetVerifierRequest) returns (common.GetVerifierResponse);
  // Gets the signature of the Notary for this Authority/Notary.
  rpc GetNotary(GetNotaryRequest) returns (GetNotaryResponse);

  // Get a list of denomination counts of the digital banknotes held in the Treasury service's vault.
  rpc GetSupply(GetSupplyRequest) returns (GetSupplyResponse);
}
