syntax = "proto3";

package participant.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "common/v1/common.proto";

// THIS PROTO FILE IS INTENDED FOR USE FOR KNOX AND KNOX CUSTOMERS.

/* [Example]
{
  "name": "WALLET_NAME",
  "metadata": {
    "user_field_1": "some value",
    "user_field_2": "another value"
  }
}
*/
message CreateWalletRequest {
  // Human friendly name of the wallet.
  string name                             = 1;
  // User-defined metadata
  optional google.protobuf.Value metadata = 2;
  // Queryable ID used by external systems
  optional string external_id             = 3;
}

/* [Example]
{
  "name": "WALLET_NAME",
  "public_key": "zPublicKeyMultibase58Encoded",
    "metadata": {
    "user_field_1": "some value",
    "user_field_2": "another value"
  }
}
*/
message WalletResponse {
  // Human friendly name of the wallet.
  string name                             = 1;
  // Public key of the wallet.
  string public_key                       = 2;
  // User-defined metadata associated with the wallet.
  optional google.protobuf.Value metadata = 3;
  // Queryable ID used by external systems
  optional string external_id             = 4;
}

/* [Example]
{
  "page": 0,
  "page_size": 10
}
*/
message ListWalletsRequest {
  // Page number for pagination.
  int32 page                  = 1;
  // Size of the page for pagination.
  int32 page_size             = 2;
  // Queryable ID used by external systems
  optional string external_id = 3;
}

/* [Example]
{
  "wallets": [
    {
      "name": "WALLET1",
      "public_key": "zPublicKeyMultibase58Encoded"
    },
    {
      "name": "WALLET2",
      "public_key": "zPublicKeyMultibase58Encoded"
    }
  ],
  "total_count": 5
}
*/
message ListWalletsResponse {
  // List of Wallet objects.
  repeated WalletResponse wallets = 1;
  // Number of wallets belonging to the owner.
  uint32 total_count              = 2;
}

/*
{
  "name": "WALLET_NAME"
}
*/
message WalletRequest {
  // Public key of the wallet
  string public_key = 1;
}

// Requests to get the Notary signature for a Notary public key
/* [Example]
{
  "verifier": "NotaryVerifierLengthVariesByAlgo"
}
*/
message GetNotaryRequest {
  // Public key of the Notary.
  string notary_verifier = 1;
  // Public key of the authority that will sign the notary verifier
  string authority_verifier = 2;
}

// Responds with the signature of the requested Notary
/* [Example]
{
  "signature": "ByteLengthSignatureVariesByAlgo"
}
*/
message GetNotaryResponse {
  // The signature of the Notary created by signing the Notary Public key with the Authority keypair
  bytes signature = 1;
}

// Request to sign a contract
/* [Example]
{
  "unsigned_contract": "",
}
*/
message SignContractRequest {
  // Unsigned contract ttl
  string unsigned_contract = 1;
}

// Response of a signed contract
/* [Example]
{
  "signed_contract": "",
  "uetr": "UETR"
}
*/
message SignContractResponse {
  // Signed contract ttl
  string signed_contract = 1;
  // A Unique End-to-end Transaction Reference, string of 36 unique characters.
  string uetr            = 2;
}

// Request to create an asset
/* [Example]
{
  "authority_verifier": "AuthorityVerifierLengthVariesByAlgo",
  "recipient_verifier": "RecipientVerifierLengthVariesByAlgo",
  "group": "g1",
  "amount": {
    "asset_code": "USD",
    "value": "123.000000"
  },
  "created_at": "1970-01-01T00:00:00.00Z"
}
*/
message CreateAssetRequest {
  // Authority that creates the asset
  string authority_verifier           = 1;
  // Recipient of the created asset
  string recipient_verifier           = 2;
  // Group
  string group                        = 3;
  // Amount
  common.Amount amount                = 4;
  // Timestamp
  string timestamp                    = 5;
}

// Response to create an asset
/* [Example]
{
  "transferred_asset": "ByteLengthTransferredAssetVariesByAlgo"
}
*/
message CreateAssetResponse {
  // An asset that has been created into existence by an Authority, but not yet authorized.
  bytes transferred_asset = 1;
}

// Request to transfer assets to a new owner
/* [Example]
{
  "authorized_assets": ["AuthorityAssetsLengthVariesByAlgo"],
  "recipient_verifier": "RecipientVerifierLengthVariesByAlgo",
  "group": "g1",
  "amount": {
    "asset_code": "USD",
    "value": "123.000000"
  },
  "created_at": "1970-01-01T00:00:00.00Z"
}
*/
message TransferAssetRequest {
  // Authorized assets to be transferred
  repeated bytes authorized_assets    = 1;
  // Recipient of the transferred assets
  string recipient_verifier           = 2;
  // Commitment group
  string group                        = 3;
  // Amount to transfer
  common.Amount amount                = 4;
  // Timestamp of the transfer
  string timestamp                    = 5;
}

// Response to transfer assets
/* [Example]
{
  "transferred": "ByteLengthTransferredVariesByAlgo",
  "change": "ByteLengthChangeVariesByAlgo",
  "refund": "ByteLengthRefundVariesByAlgo"
}
*/
message TransferAssetResponse {
  // Transferred asset
  bytes transferred     = 1;
  // Change asset
  optional bytes change = 2;
  // Refund asset
  bytes refund          = 3;
}

// Transacts and holds digital banknotes. This is a server side wallet solution in lieu of a mobile wallet,
// hosted by the bank on behalf of the customer who opts in to do so. Can also be used by institutions,
// e.g. a financial institution vault.
service Participant {
  // Creates a new wallet
  rpc CreateWallet(CreateWalletRequest) returns (WalletResponse);
  // Gets an existing wallet.
  rpc GetWallet(WalletRequest) returns (WalletResponse);
  // List all wallets.
  rpc ListWallets(ListWalletsRequest) returns (ListWalletsResponse);
  // Deletes the wallet with the verifier. Must have zero balance.
  rpc DeleteWallet(WalletRequest) returns (google.protobuf.Empty);

  // Gets the verifier of the authority wallet.
  rpc GetAuthorityVerifier(common.GetVerifierRequest) returns (common.GetVerifierResponse);
  // Gets the verifier of the treasury wallet.
  rpc GetTreasuryVerifier(common.GetVerifierRequest) returns (common.GetVerifierResponse);
  // Gets the signature of the Notary for this Authority/Notary.
  rpc GetNotary(GetNotaryRequest) returns (GetNotaryResponse);

  // Sign a contract
  rpc SignContract(SignContractRequest) returns (SignContractResponse);
  // Create an asset
  rpc CreateAsset(CreateAssetRequest) returns (CreateAssetResponse);
  // Transfer existing assets over to a new owner
  rpc TransferAsset(TransferAssetRequest) returns (TransferAssetResponse);
}
