//
// Â©  2025 Knox Networks, Inc. All rights reserved.
//
// This software is the confidential and proprietary information of Knox Networks, Inc. You  shall
// not disclose such confidential Information and shall use it only in accordance with the terms of
// the license agreement you entered into with Knox Networks, Inc. This software may include third-
// party components, which are subject to their own license terms. By using this software, you
// agree to comply with those terms.
//
// Unauthorized copying of this file, via any medium is strictly prohibited.
//

syntax = "proto3";

package participant.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

// THIS PROTO FILE IS INTENDED FOR USE FOR KNOX AND KNOX CUSTOMERS.

/* [Example]
{
  "name": "WALLET_NAME",
  "metadata": {
    "user_field_1": "some value",
    "user_field_2": "another value"
  }
}
*/
message CreateWalletRequest {
  // Human friendly name of the wallet.
  string name                             = 1;
  // User-defined metadata
  optional google.protobuf.Value metadata = 2;
  // Queryable ID used by external systems
  optional string external_id             = 3;
}

/* [Example]
{
  "name": "WALLET_NAME",
  "public_key": "zPublicKeyMultibase58Encoded",
    "metadata": {
    "user_field_1": "some value",
    "user_field_2": "another value"
  }
}
*/
message WalletResponse {
  // Human friendly name of the wallet.
  string name                             = 1;
  // Public key of the wallet.
  string public_key                       = 2;
  // User-defined metadata associated with the wallet.
  optional google.protobuf.Value metadata = 3;
  // Queryable ID used by external systems
  optional string external_id             = 4;
}

/* [Example]
{
  "page": 0,
  "page_size": 10
}
*/
message ListWalletsRequest {
  // Page number for pagination.
  int32 page                  = 1;
  // Size of the page for pagination.
  int32 page_size             = 2;
  // Queryable ID used by external systems
  optional string external_id = 3;
}

/* [Example]
{
  "wallets": [
    {
      "name": "WALLET1",
      "public_key": "zPublicKeyMultibase58Encoded"
    },
    {
      "name": "WALLET2",
      "public_key": "zPublicKeyMultibase58Encoded"
    }
  ],
  "total_count": 5
}
*/
message ListWalletsResponse {
  // List of Wallet objects.
  repeated WalletResponse wallets = 1;
  // Number of wallets belonging to the owner.
  uint32 total_count              = 2;
}

/*
{
  "name": "WALLET_NAME"
}
*/
message WalletRequest {
  // Public key of the wallet
  string public_key = 1;
}

// Transacts and holds digital banknotes. This is a server side wallet solution in lieu of a mobile wallet,
// hosted by the bank on behalf of the customer who opts in to do so. Can also be used by institutions,
// e.g. a financial institution vault.
service Participant {
  // Creates a new wallet
  rpc CreateWallet(CreateWalletRequest) returns (WalletResponse);
  // Gets an existing wallet.
  rpc GetWallet(WalletRequest) returns (WalletResponse);
  // List all wallets.
  rpc ListWallets(ListWalletsRequest) returns (ListWalletsResponse);
  // Deletes the wallet with the verifier. Must have zero balance.
  rpc DeleteWallet(WalletRequest) returns (google.protobuf.Empty);
}
